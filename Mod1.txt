Attribute VB_Name = "Module1"
Sub SectionDataByDateRangesFlexible()
    Dim wsOriginal As Worksheet
    Dim wsNew As Worksheet
    Dim lastRowOriginal As Long
    Dim nextRow As Long
    Dim i As Long
    Dim colNextPaymentDueDate As Long
    Dim colMaturityDate As Long, colNonAcc As Long
    Dim today As Date
    Dim firstDayCurrentMonth As Date
    Dim processedRows As Object, processedRowsT As Object
    Dim colName As Long
    Dim wsTOrig As Worksheet ' filtered
    Dim wsT As Worksheet
    Dim lasTrowT As Long
    Dim nextRowT As Long


    ' Set the original worksheet
    Set wsOriginal = ThisWorkbook.Worksheets("Filtered Data - CDC")
    If wsOriginal Is Nothing Then
        MsgBox "Filtered Data worksheet not found!"
        Exit Sub
    End If
     Set wsTOrig = ThisWorkbook.Worksheets("Filtered Data - $0")
     If wsTOrig Is Nothing Then
        MsgBox "Filtered Data - $0  worksheet not found"
        Exit Sub
    End If

    ' Create a new worksheet
    On Error Resume Next
    Set wsNew = ThisWorkbook.Worksheets("Pursuit-CDC")
    If Not wsNew Is Nothing Then
        Application.DisplayAlerts = False
        wsNew.Delete
        Application.DisplayAlerts = True
    End If
    On Error GoTo 0
    Set wsNew = ThisWorkbook.Worksheets.Add
    wsNew.name = "Pursuit-CDC" ' Change this name if needed
    ' create new for wsT
    
     On Error Resume Next
    Set wsT = ThisWorkbook.Worksheets("Non-Accrual - $0")
    If Not wsT Is Nothing Then
        Application.DisplayAlerts = False
        wsT.Delete
        Application.DisplayAlerts = True
    End If
    On Error GoTo 0
    Set wsT = ThisWorkbook.Worksheets.Add
    wsT.name = "Non-Accrual - $0" ' Change this name if needed
    
    
    

    ' Get the last row in the original worksheet
    lastRowOriginal = wsOriginal.Cells(wsOriginal.Rows.Count, "A").End(xlUp).row
    lasTrowT = wsTOrig.Cells(wsTOrig.Rows.Count, "A").End(xlUp).row
    
    ' Find the columns for "Next Payment Due Date" and "Maturity Date"
    colNextPaymentDueDate = FindHeaderCol(wsOriginal, "Next Payment Due Date")
    colMaturityDate = FindHeaderCol(wsOriginal, "Maturity Date")
    colNonAcc = FindHeaderCol(wsOriginal, "Non-Accrual")
    colName = FindHeaderCol(wsOriginal, "Company Name")
    
    If colNextPaymentDueDate = 0 Or colMaturityDate = 0 Or colNonAcc = 0 Then
        MsgBox "Necessary columns not found!"
        Exit Sub
    End If
    
    ' Initialize the row counter for the new worksheet
    nextRow = 1
    
    ' Initialize today's date and the first day of the current month
    today = Date
    firstDayCurrentMonth = DateSerial(Year(today), Month(today), 1)
    lastDayPreviousMonth = DateSerial(Year(Date), Month(Date), 0)  ' Gets the last day of the previous month

    
    ' Initialize dictionary to track processed rows
    Set processedRows = CreateObject("Scripting.Dictionary")

    ' Add sections for each date range
    
     AddSectionHeader wsNew, "Matured", nextRow
    ' Process nonaccrual loans with specific conditions
    

    SectionDataMatured wsOriginal, wsNew, colMaturityDate, nextRow, "<=", lastDayPreviousMonth
    
    AddSectionHeader wsNew, "1-30 Days", nextRow
    SectionData wsOriginal, wsNew, colNextPaymentDueDate, nextRow, processedRows, ">=", DateAdd("m", -1, firstDayCurrentMonth), "<", firstDayCurrentMonth
    
    AddSectionHeader wsNew, "30 Days", nextRow
    SectionData wsOriginal, wsNew, colNextPaymentDueDate, nextRow, processedRows, ">=", DateAdd("m", -2, firstDayCurrentMonth), "<", DateAdd("m", -1, firstDayCurrentMonth)
    
    AddSectionHeader wsNew, "60 Days", nextRow
    SectionData wsOriginal, wsNew, colNextPaymentDueDate, nextRow, processedRows, ">=", DateAdd("m", -3, firstDayCurrentMonth), "<", DateAdd("m", -2, firstDayCurrentMonth)
    
    AddSectionHeader wsNew, "Over 90 Days", nextRow
    SectionDataOver90Days wsOriginal, wsNew, colNextPaymentDueDate, nextRow, processedRows
    
    
  For i = 2 To lastRowOriginal
    ' Check if row i is already in the processedRows dictionary
    If Not processedRows.exists(i) Then
        If (wsOriginal.Cells(i, colNonAcc).Value > 0) And _
            (wsOriginal.Cells(i, colNextPaymentDueDate).Value >= firstDayCurrentMonth And _
            wsOriginal.Cells(i, colNextPaymentDueDate).Value <= Date) Then
            Debug.Print wsOriginal.Cells(i, colName).Value ' Print company name for debug
            wsOriginal.Rows(i).Copy Destination:=wsNew.Rows(nextRow) ' Copy row
            nextRow = nextRow + 1 ' Move to the next row in the new worksheet
            processedRows.Add i, True ' Mark row as processed
        End If
    End If
Next i


     ' Debugging: Print date ranges to Immediate Window
    Debug.Print "Date Ranges:"
    Debug.Print "1-30 Days: " & Format(DateAdd("m", -1, firstDayCurrentMonth), "mm/dd/yyyy") & " to " & Format(DateAdd("d", -1, firstDayCurrentMonth), "mm/dd/yyyy")
    Debug.Print "30-60 Days: " & Format(DateAdd("m", -2, firstDayCurrentMonth), "mm/dd/yyyy") & " to " & Format(DateAdd("d", -1, DateAdd("m", -1, firstDayCurrentMonth)), "mm/dd/yyyy")
    Debug.Print "60-90 Days: " & Format(DateAdd("m", -3, firstDayCurrentMonth), "mm/dd/yyyy") & " to " & Format(DateAdd("d", -1, DateAdd("m", -2, firstDayCurrentMonth)), "mm/dd/yyyy")
    Debug.Print "Over 90 Days: before " & Format(DateAdd("d", -1, DateAdd("m", -3, firstDayCurrentMonth)), "mm/dd/yyyy")
   
   
    ' Autofit columns
    wsNew.Columns.AutoFit
    
    
    ' Find the columns for "Next Payment Due Date" and "Maturity Date"
    colNextPaymentDueDate = FindHeaderCol(wsTOrig, "Next Payment Due Date")
    colMaturityDate = FindHeaderCol(wsTOrig, "Maturity Date")
    colNonAcc = FindHeaderCol(wsTOrig, "Non-Accrual")
    
    If colNextPaymentDueDate = 0 Or colMaturityDate = 0 Or colNonAcc = 0 Then
        MsgBox "Necessary columns not found!"
        Exit Sub
    End If
    
    
    ' Initialize the row counter for the new worksheet
    nextRowT = 1
    
   

    ' Initialize dictionary to track processed rows
    Set processedRowsT = CreateObject("Scripting.Dictionary")

    ' Add sections for each date range
    AddSectionHeaderNA wsT, "Matured", nextRowT
     
  
    SectionDataMatured wsTOrig, wsT, colMaturityDate, nextRowT, "<=", Date
    
    AddSectionHeaderNA wsT, "1-30 Days", nextRowT
    SectionData wsTOrig, wsT, colNextPaymentDueDate, nextRowT, processedRowsT, ">=", DateAdd("m", -1, firstDayCurrentMonth), "<", firstDayCurrentMonth
    
    AddSectionHeaderNA wsT, "30 Days", nextRowT
   SectionData wsTOrig, wsT, colNextPaymentDueDate, nextRowT, processedRowsT, ">=", DateAdd("m", -2, firstDayCurrentMonth), "<", DateAdd("m", -1, firstDayCurrentMonth)
   
    AddSectionHeaderNA wsT, "60 Days", nextRowT
    SectionData wsTOrig, wsT, colNextPaymentDueDate, nextRowT, processedRowsT, ">=", DateAdd("m", -3, firstDayCurrentMonth), "<", DateAdd("m", -2, firstDayCurrentMonth)

    AddSectionHeaderNA wsT, "Over 90 Days", nextRowT
    SectionDataOver90Days wsTOrig, wsT, colNextPaymentDueDate, nextRowT, processedRowsT
   For i = 2 To lasTrowT
    ' Check if row i is already in the processedRows dictionary
    If Not processedRowsT.exists(i) Then
        If (wsTOrig.Cells(i, colNonAcc).Value > 0) And _
            (wsTOrig.Cells(i, colNextPaymentDueDate).Value >= firstDayCurrentMonth And _
            wsTOrig.Cells(i, colNextPaymentDueDate).Value <= Date) Then
            Debug.Print wsTOrig.Cells(i, colName).Value ' Print company name for debug
            wsTOrig.Rows(i).Copy Destination:=wsT.Rows(nextRowT) ' Copy row
            nextRowT = nextRowT + 1 ' Move to the next row in the new worksheet
            processedRowsT.Add i, True ' Mark row as processed
        End If
    End If
Next i
        ' Autofit columns
    wsT.Columns.AutoFit

  '  MsgBox "Data has been sectioned by date ranges successfully!"
End Sub

Sub AddSectionHeader(ws As Worksheet, sectionName As String, ByRef nextRow As Long)
    ws.Cells(nextRow, 1).Value = sectionName
    ws.Cells(nextRow, 1).Font.Bold = True
    ws.Cells(nextRow, 1).Font.Underline = xlUnderlineStyleSingle
    'Adding formatting to headers
    'With ws
      '  With .Range(.Cells(nextRow, 1), .Cells(nextRow, 26))
       '     .Font.Name = "Rockwell"
       '     .Interior.Color = RGB(49, 62, 86)
        '    .Font.Color = RGB(255, 255, 255)
        '    .Font.Size = 12
       ' End With
       ' With .Range(.Cells(nextRow + 1, 1), .Cells(nextRow + 1, 26))
        '    .Font.Name = "Rockwell"
        '    .Interior.Color = RGB(59, 75, 105)
         '   .Font.Color = RGB(255, 255, 255)
       ' End With
        
    'End With
        

    nextRow = nextRow + 1

       ws.Cells(nextRow, 1).Value = "Company Name"
    ws.Cells(nextRow, 2).Value = "Loan Nbr"
    ws.Cells(nextRow, 3).Value = "Next Payment Due Date"
    ws.Cells(nextRow, 4).Value = "Note Date"
    ws.Cells(nextRow, 5).Value = "Principal"
    ws.Cells(nextRow, 6).Value = "Charge-Off $"
    ws.Cells(nextRow, 7).Value = "Charge-Off Date"
    ws.Cells(nextRow, 8).Value = "Risk Factor"
    ws.Cells(nextRow, 9).Value = "Maturity Date"
    ws.Cells(nextRow, 10).Value = "Int Paid to Date"
    ws.Cells(nextRow, 11).Value = "Non-Accrual"
    ws.Cells(nextRow, 12).Value = "SBA Gty%"
    ws.Cells(nextRow, 13).Value = "Participant"
    ws.Cells(nextRow, 14).Value = "Amount Past Due"
    ws.Cells(nextRow, 15).Value = "Special Asset Analyst"
    ws.Cells(nextRow, 16).Value = "Site Visit Date"
     ws.Cells(nextRow, 17).Value = "Non-Accrual Date"
    ws.Rows(nextRow).Font.Bold = True

    
    
    nextRow = nextRow + 1
End Sub
Sub AddSectionHeaderNA(ws As Worksheet, sectionName As String, ByRef nextRow As Long)
    ws.Cells(nextRow, 1).Value = sectionName
    ws.Cells(nextRow, 1).Font.Bold = True
    ws.Cells(nextRow, 1).Font.Underline = xlUnderlineStyleSingle
    'Adding formatting to headers
    'With ws
      '  With .Range(.Cells(nextRow, 1), .Cells(nextRow, 26))
       '     .Font.Name = "Rockwell"
       '     .Interior.Color = RGB(49, 62, 86)
        '    .Font.Color = RGB(255, 255, 255)
        '    .Font.Size = 12
       ' End With
       ' With .Range(.Cells(nextRow + 1, 1), .Cells(nextRow + 1, 26))
        '    .Font.Name = "Rockwell"
        '    .Interior.Color = RGB(59, 75, 105)
         '   .Font.Color = RGB(255, 255, 255)
       ' End With
        
    'End With
        

    nextRow = nextRow + 1

       ws.Cells(nextRow, 1).Value = "Company Name"
    ws.Cells(nextRow, 2).Value = "Loan Nbr"
    ws.Cells(nextRow, 3).Value = "Next Payment Due Date"
    ws.Cells(nextRow, 4).Value = "Note Date"
    ws.Cells(nextRow, 5).Value = "Principal"
    ws.Cells(nextRow, 6).Value = "Charge-Off $"
    ws.Cells(nextRow, 7).Value = "Borrower Balance"
    ws.Cells(nextRow, 8).Value = "Maturity Date"
    ws.Cells(nextRow, 9).Value = "Risk Factor"
    ws.Cells(nextRow, 10).Value = "Int Paid to Date"
    ws.Cells(nextRow, 11).Value = "SBA Gty%"
    ws.Cells(nextRow, 12).Value = "Participant"
    ws.Cells(nextRow, 13).Value = "Non-Accrual"
    ws.Cells(nextRow, 14).Value = "Amount Past Due"
    ws.Cells(nextRow, 15).Value = "Special Asset Analyst"
    ws.Cells(nextRow, 16).Value = "Site Visit Date"
    ws.Cells(nextRow, 17).Value = "Non-Accrual Date"
     ws.Cells(nextRow, 18).Value = "Charge-Off Date"
    ws.Rows(nextRow).Font.Bold = True

    
    nextRow = nextRow + 1
End Sub

Sub SectionData(wsOriginal As Worksheet, wsNew As Worksheet, colDate As Long, ByRef nextRow As Long, processedRows As Object, ParamArray conditions() As Variant)
    Dim lastRowOriginal As Long
    Dim i As Long
    Dim includeRow As Boolean
    Dim dueDate As Date
    Dim nonAccr As Integer
    Dim colNonAcc As Long
    Dim firstDayMonth As Long

    ' Get the last row in the original worksheet
    lastRowOriginal = wsOriginal.Cells(wsOriginal.Rows.Count, "A").End(xlUp).row

    colNonAcc = FindHeaderCol(wsOriginal, "Non-Accrual")
    
    firstDayCurrentMonth = DateSerial(Year(Date), Month(Date), 1)
    
    ' Loop through the original data
    For i = 2 To lastRowOriginal ' Assuming headers are in the first row
        ' Skip rows that have already been processed
        If Not processedRows.exists(i) Then
            dueDate = wsOriginal.Cells(i, colDate).Value
 

            ' Check conditions
            includeRow = True
            If UBound(conditions) >= 1 Then
                If conditions(0) = "<" Then
                    If dueDate >= conditions(1) Then includeRow = False
                ElseIf conditions(0) = ">=" Then
                    If dueDate < conditions(1) Then includeRow = False
                End If
            End If
            If UBound(conditions) >= 3 Then
                If conditions(2) = "<" Then
                    If dueDate >= conditions(3) Then includeRow = False
                End If
            End If


             

            If includeRow Then
                Debug.Print "Copying row "; i; " to section at row "; nextRow
                wsOriginal.Rows(i).Copy Destination:=wsNew.Rows(nextRow)
                nextRow = nextRow + 1
                processedRows.Add i, True
            End If
        End If
    Next i
End Sub

Sub SectionDataOver90Days(wsOriginal As Worksheet, wsNew As Worksheet, colNextPaymentDueDate As Long, ByRef nextRow As Long, processedRows As Object)
  
   Dim lastRowOriginal As Long
    Dim i As Long
    Dim includeRow As Boolean
    Dim dueDate As Date
    Dim ninetyDaysAgo As Date

    ' Get the last row in the original worksheet
    lastRowOriginal = wsOriginal.Cells(wsOriginal.Rows.Count, "A").End(xlUp).row
    today = Date
    firstDayCurrentMonth = DateSerial(Year(today), Month(today), 1)
    lastDayPreviousMonth = DateSerial(Year(Date), Month(Date), 0)  ' Gets the last day of the previous month


   ninetyDaysAgo = DateAdd("d", -1, DateAdd("m", -3, firstDayCurrentMonth))
    ' Loop through the original data
    For i = 2 To lastRowOriginal
        ' Skip rows that have already been processed
        If Not processedRows.exists(i) Then
            dueDate = wsOriginal.Cells(i, colNextPaymentDueDate).Value

            ' Only check Next Payment Due Date
            If dueDate <= ninetyDaysAgo Then
                wsOriginal.Rows(i).Copy Destination:=wsNew.Rows(nextRow)
                nextRow = nextRow + 1
                processedRows.Add i, True
            End If
        End If
    Next i
End Sub


Sub SectionDataMatured(wsOriginal As Worksheet, wsNew As Worksheet, colMaturityDate As Long, ByRef nextRow As Long, ParamArray conditions() As Variant)
    Dim lastRowOriginal As Long
    Dim i As Long
    Dim maturityDate As Date

    ' Get the last row in the original worksheet
    lastRowOriginal = wsOriginal.Cells(wsOriginal.Rows.Count, "A").End(xlUp).row

    ' Loop through the original data
    For i = lastRowOriginal To 2 Step -1 ' Assuming headers are in the first row
        maturityDate = wsOriginal.Cells(i, colMaturityDate).Value

        ' Check conditions for maturity date
        If UBound(conditions) >= 1 Then
            If conditions(0) = "<=" Then
                If IsDate(maturityDate) And maturityDate <= conditions(1) Then
                    Debug.Print "Moving matured loan from row "; i; " to 'Matured' section at row "; nextRow
                    wsOriginal.Rows(i).Copy Destination:=wsNew.Rows(nextRow)
                    nextRow = nextRow + 1
                    wsOriginal.Rows(i).Delete
                End If
            End If
        End If
    Next i
End Sub


Sub AddSpaceUnderHeaders()
    Dim ws As Worksheet
    Dim headers() As String
    Dim headerRow As Long
    Dim numRowsToAdd As Integer
    Dim i As Integer
    
    ' Set the worksheet
    Set ws = ThisWorkbook.Worksheets("Pursuit-CDC") ' Change "Sheet1" to the actual name of your worksheet
    
    ' Define the headers and the number of rows to add
    headers = Split("30 Days,60 Days,Over 90 Days,Matured,Non-Accrual", ",")
    numRowsToAdd = 1 ' Specify the number of rows to add under each header

    ' Loop through each header and add rows
    For i = LBound(headers) To UBound(headers)
        headerRow = FindHeaderRow(ws, headers(i))
        If headerRow > 0 Then
            ws.Rows(headerRow).Resize(numRowsToAdd).Insert Shift:=xlDown
        End If
    Next i

  '  MsgBox "Rows added successfully under each header!"
End Sub



Function FindHeaderRow(ws As Worksheet, header As String) As Long
    Dim rng As Range
    Set rng = ws.Columns("A:A").Find(What:=header, LookIn:=xlValues, LookAt:=xlWhole, MatchCase:=False)
    If Not rng Is Nothing Then
        FindHeaderRow = rng.row
    Else
        FindHeaderRow = 0 ' Return 0 if the header is not found
    End If
End Function

Sub SortAndGroupLoansByNonAccrual()
    Dim ws As Worksheet
    Dim lastRow As Long
    Dim over90Row As Long
    Dim nextRow As Long
    Dim i As Long
    Dim colNonAccrual As Long
    Dim colNextPaymentDueDate As Long
    Dim NonAccrual As Variant
    Dim dueDate As Variant
    Dim loanData As Object
    Dim tempArray As Variant

    ' Set the worksheet
    Set ws = ThisWorkbook.Worksheets("Pursuit-CDC")
    If ws Is Nothing Then
        MsgBox "Sectioned Data worksheet not found!"
        Exit Sub
    End If

    ' Find the column for "Next Payment Due Date" and "Non-Accrual"
    colNextPaymentDueDate = FindHeaderCol2(ws, "Next Payment Due Date")
    colNonAccrual = FindHeaderCol2(ws, "Non-Accrual")
    If colNextPaymentDueDate = 0 Or colNonAccrual = 0 Then
        MsgBox "Necessary columns not found!"
        Exit Sub
    End If

    ' Get the last row in the worksheet
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).row

    ' Initialize the dictionary
    Set loanData = CreateObject("Scripting.Dictionary")

    ' Find the "Over 90 Days" header row
    For i = 1 To lastRow
        If ws.Cells(i, 1).Value = "Over 90 Days" Then
            over90Row = i
            Exit For
        End If
    Next i
    
    ' Find Matured Header to stop collecting loans for Over 90 Days
    Dim colMaturity As Long
    
    For i = 1 To lastRow
        If ws.Cells(i, 1).Value = "Matured" Then
            colMaturity = i
            Exit For
        End If
    Next i
    
    ' Find 1-30 Days Header to stop collecting loans for Over 90 Days
    Dim colFirst As Long
    
    For i = 1 To lastRow
        If ws.Cells(i, 1).Value = "1-30 Days" Then
            colFirst = i
            Exit For
        End If
    Next i
    
    Dim today As Date
    Dim firstDayCurrentMonth As Date
    today = Date
    firstDayCurrentMonth = DateSerial(Year(today), Month(today), 1)

    

    ' Collect all loans to view non-accrual status
    For i = colFirst To lastRow
      '  dueDate = ws.Cells(i, colNextPaymentDueDate).Value
        
                loanData.Add i, ws.Rows(i).Value
    
    Next i

    ' Convert dictionary values to an array for sorting
    tempArray = loanData.Items

    ' Sort the array by Non-Accrual status (ascending)
    Dim j As Long
    For i = LBound(tempArray) To UBound(tempArray)
        For j = i + 1 To UBound(tempArray)
            If tempArray(i)(1, colNonAccrual) > tempArray(j)(1, colNonAccrual) Then
                Dim temp As Variant
                temp = tempArray(i)
                tempArray(i) = tempArray(j)
                tempArray(j) = temp
            End If
        Next j
    Next i

    ' Insert the "Accrual" subheader under "Over 90 Days" header
    ws.Rows(over90Row + 2).Insert Shift:=xlDown
    ws.Cells(over90Row + 2, 1).Value = "Accrual"
    ws.Cells(over90Row + 2, 1).Font.Bold = True
    ws.Cells(over90Row + 2, 1).Font.Underline = xlUnderlineStyleSingle

    ' Reset nextRow for categorization
    nextRow = over90Row + 3

    ' Copy sorted loans back to the worksheet
    For i = LBound(tempArray) To UBound(tempArray)
        ws.Rows(nextRow).Value = tempArray(i)
        nextRow = nextRow + 1
    Next i

    ' Find the last loan with Non-Accrual status of 0
    Dim lastAccrualRow As Long
    lastAccrualRow = over90Row + 1
    For i = over90Row + 2 To nextRow - 1
        If ws.Cells(i, colNonAccrual).Value = 0 Then
            lastAccrualRow = i
        End If
    Next i

    ' Insert the "Non-Accrual" subheader
    ws.Rows(lastAccrualRow + 1).Insert Shift:=xlDown
    ws.Cells(lastAccrualRow + 1, 1).Value = "Non-Accrual"
    ws.Cells(lastAccrualRow + 1, 1).Font.Bold = True
    ws.Cells(lastAccrualRow + 1, 1).Font.Underline = xlUnderlineStyleSingle

    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).row

    ' Autofit columns
    ws.Columns.AutoFit
    ws.Rows(lastRow).Delete
     

   ' MsgBox "Loans have been grouped by Non-Accrual status successfully!"
End Sub

Function FindHeaderCol2(ws As Worksheet, header As String) As Long
    Dim rng As Range
    Set rng = ws.Rows(2).Find(What:=header, LookIn:=xlValues, LookAt:=xlWhole, MatchCase:=False)
    If Not rng Is Nothing Then
        FindHeaderCol2 = rng.Column
    Else
        FindHeaderCol2 = 0 ' Return 0 if the header is not found
    End If
End Function

Function FindColumn(ws As Worksheet, header As String) As Long
    Dim rng As Range
    Set rng = ws.Columns(1).Find(What:=header, LookIn:=xlValues, LookAt:=xlWhole, MatchCase:=False)
    If Not rng Is Nothing Then
        FindColumn = rng.Column
    Else
        FindColumn = 0 ' Return 0 if the header is not found
    End If
End Function






Function FindHeaderCol(ws As Worksheet, header As String) As Long
    Dim rng As Range
    Set rng = ws.Rows(1).Find(What:=header, LookIn:=xlValues, LookAt:=xlWhole, MatchCase:=False)
    If Not rng Is Nothing Then
        FindHeaderCol = rng.Column
    Else
        FindHeaderCol = 0 ' Return 0 if the header is not found
    End If
End Function



Sub RemoveUnnecessaryColumns()
    Dim ws As Worksheet, wsT As Worksheet
    Dim lastCol As Long, lastColT As Long
    Dim i As Long
    Dim headers As Variant

    ' Set the worksheet to "Filtered Data"
    Set ws = ThisWorkbook.Worksheets("Filtered Data - CDC")
    Set wsT = ThisWorkbook.Worksheets("Filtered Data - $0")
    

      ' Define the headers to keep
    headers = Array("Company Name", "Loan Nbr", "Next Payment Due Date", "Note Date", "G/L Balance", "USER18N", "Maturity Date", "Risk Factor", "Int Paid to Date", "sba Guarantee Percentage", "Part Id", "Non-Accrual", "Total Due", "Servicing Officer", "User8d", "USER9D", "USER10D")
    HeadersNA = Array("Company Name", "Loan Nbr", "Next Payment Due Date", "Note Date", "G/L Balance", "USER18N", "Borr Bal (Bor)", "Maturity Date", "Risk Factor", "Int Paid to Date", "sba Guarantee Percentage", "Part Id", "Non-Accrual", "Total Due", "Servicing Officer", "User8d", "USER9D", "USER10D")

    ' Get the last column in the worksheet
    lastCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
    lastColT = wsT.Cells(1, wsT.Columns.Count).End(xlToLeft).Column

    ' Loop through the columns from right to left
    For i = lastCol To 1 Step -1
        ' Check if the header in the current column is in the headers array
        If IsError(Application.Match(ws.Cells(1, i).Value, headers, 0)) Then
            ' If not, delete the column
            ws.Columns(i).Delete
        End If
    Next i

     ' Do same for wsT
     For i = lastColT To 1 Step -1
        ' Check if the header in the current column is in the headers array
        If IsError(Application.Match(wsT.Cells(1, i).Value, HeadersNA, 0)) Then
            ' If not, delete the column
            wsT.Columns(i).Delete
        End If
    Next i
   ' MsgBox "Unnecessary columns have been removed successfully!"
End Sub





